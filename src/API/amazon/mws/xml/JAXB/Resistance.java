//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.05.03 at 03:15:27 PM EDT 
//


package API.amazon.mws.xml.JAXB;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for Resistance.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="Resistance">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="picoohms"/>
 *     &lt;enumeration value="nanoohms"/>
 *     &lt;enumeration value="microohms"/>
 *     &lt;enumeration value="milliohms"/>
 *     &lt;enumeration value="ohm"/>
 *     &lt;enumeration value="kiloohms"/>
 *     &lt;enumeration value="megaohms"/>
 *     &lt;enumeration value="gigaohms"/>
 *     &lt;enumeration value="teraohms"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "Resistance")
@XmlEnum
public enum Resistance {

    @XmlEnumValue("picoohms")
    PICOOHMS("picoohms"),
    @XmlEnumValue("nanoohms")
    NANOOHMS("nanoohms"),
    @XmlEnumValue("microohms")
    MICROOHMS("microohms"),
    @XmlEnumValue("milliohms")
    MILLIOHMS("milliohms"),
    @XmlEnumValue("ohm")
    OHM("ohm"),
    @XmlEnumValue("kiloohms")
    KILOOHMS("kiloohms"),
    @XmlEnumValue("megaohms")
    MEGAOHMS("megaohms"),
    @XmlEnumValue("gigaohms")
    GIGAOHMS("gigaohms"),
    @XmlEnumValue("teraohms")
    TERAOHMS("teraohms");
    private final String value;

    Resistance(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static Resistance fromValue(String v) {
        for (Resistance c: Resistance.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
